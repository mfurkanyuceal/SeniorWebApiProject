// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SeniorWepApiProject.Data;

namespace SeniorWepApiProject.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("text");

                b.Property<string>("ProviderKey")
                    .HasColumnType("text");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("text");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.Property<string>("RoleId")
                    .HasColumnType("text");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.Property<string>("LoginProvider")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<string>("Value")
                    .HasColumnType("text");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("SeniorWebApiProject.Domain.LocationModels.Address", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("AppUserId")
                    .HasColumnType("text");

                b.Property<int>("CityId")
                    .HasColumnType("integer");

                b.Property<int>("DistrictId")
                    .HasColumnType("integer");

                b.Property<int>("NeighborhoodId")
                    .HasColumnType("integer");

                b.HasKey("Id");

                b.HasIndex("AppUserId");

                b.HasIndex("CityId");

                b.HasIndex("DistrictId");

                b.HasIndex("NeighborhoodId");

                b.ToTable("Addresses");
            });

            modelBuilder.Entity("SeniorWebApiProject.Domain.LocationModels.City", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("Cities");
            });

            modelBuilder.Entity("SeniorWebApiProject.Domain.LocationModels.District", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int>("CityId")
                    .HasColumnType("integer");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("CityId");

                b.ToTable("Districts");
            });

            modelBuilder.Entity("SeniorWebApiProject.Domain.LocationModels.Neighborhood", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int>("DistrictId")
                    .HasColumnType("integer");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<int>("Number")
                    .HasColumnType("integer");

                b.Property<string>("Street")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("DistrictId");

                b.ToTable("Neighborhoods");
            });

            modelBuilder.Entity("SeniorWebApiProject.Domain.UserModels.Ability", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("Abilities");
            });

            modelBuilder.Entity("SeniorWebApiProject.Domain.UserModels.Fancy", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("Fancies");
            });

            modelBuilder.Entity("SeniorWebApiProject.Domain.UserModels.UserAbility", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.Property<int>("AbilityId")
                    .HasColumnType("integer");

                b.HasKey("UserId", "AbilityId");

                b.HasIndex("AbilityId");

                b.ToTable("UserAbilities");
            });

            modelBuilder.Entity("SeniorWebApiProject.Domain.UserModels.UserFancy", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.Property<int>("FancyId")
                    .HasColumnType("integer");

                b.HasKey("UserId", "FancyId");

                b.HasIndex("FancyId");

                b.ToTable("UserFancies");
            });

            modelBuilder.Entity("SeniorWepApiProject.Domain.IdentityModels.AppRole", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasName("RoleNameIndex");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("SeniorWepApiProject.Domain.IdentityModels.AppUser", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("integer");

                b.Property<string>("BirthDate")
                    .HasColumnType("text");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("DeletionDate")
                    .HasColumnType("text");

                b.Property<string>("Email")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("FirstName")
                    .HasColumnType("text");

                b.Property<string>("Gender")
                    .HasColumnType("text");

                b.Property<string>("LastLoginDate")
                    .HasColumnType("text");

                b.Property<string>("LastLogoutDate")
                    .HasColumnType("text");

                b.Property<string>("LastName")
                    .HasColumnType("text");

                b.Property<string>("LastUpdateDate")
                    .HasColumnType("text");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("boolean");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NormalizedEmail")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.Property<string>("PasswordHash")
                    .HasColumnType("text");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("text");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("RegistrationDate")
                    .HasColumnType("text");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("text");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("boolean");

                b.Property<string>("UserName")
                    .HasColumnType("character varying(256)")
                    .HasMaxLength(256);

                b.Property<string>("UserPhotoURL")
                    .HasColumnType("text");

                b.Property<bool>("isActive")
                    .HasColumnType("boolean");

                b.Property<bool>("isAdmin")
                    .HasColumnType("boolean");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasName("UserNameIndex");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("SeniorWepApiProject.Domain.Swap", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<string>("AcceptedDate")
                    .HasColumnType("text");

                b.Property<int>("AddressId")
                    .HasColumnType("integer");

                b.Property<bool>("IsAccepted")
                    .HasColumnType("boolean");

                b.Property<bool>("IsActive")
                    .HasColumnType("boolean");

                b.Property<bool>("IsDone")
                    .HasColumnType("boolean");

                b.Property<int>("Rate")
                    .HasColumnType("integer");

                b.Property<string>("RecieverUserId")
                    .HasColumnType("text");

                b.Property<string>("SendedDate")
                    .HasColumnType("text");

                b.Property<string>("SenderUserId")
                    .HasColumnType("text");

                b.Property<string>("SwapDate")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("AddressId");

                b.HasIndex("RecieverUserId");

                b.HasIndex("SenderUserId");

                b.ToTable("Swaps");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("SeniorWepApiProject.Domain.IdentityModels.AppRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("SeniorWepApiProject.Domain.IdentityModels.AppUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("SeniorWepApiProject.Domain.IdentityModels.AppUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("SeniorWepApiProject.Domain.IdentityModels.AppRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SeniorWepApiProject.Domain.IdentityModels.AppUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("SeniorWepApiProject.Domain.IdentityModels.AppUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("SeniorWebApiProject.Domain.LocationModels.Address", b =>
            {
                b.HasOne("SeniorWepApiProject.Domain.IdentityModels.AppUser", null)
                    .WithMany("Addresses")
                    .HasForeignKey("AppUserId");

                b.HasOne("SeniorWebApiProject.Domain.LocationModels.City", "City")
                    .WithMany()
                    .HasForeignKey("CityId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SeniorWebApiProject.Domain.LocationModels.District", "District")
                    .WithMany()
                    .HasForeignKey("DistrictId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SeniorWebApiProject.Domain.LocationModels.Neighborhood", "Neighborhood")
                    .WithMany()
                    .HasForeignKey("NeighborhoodId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("SeniorWebApiProject.Domain.LocationModels.District", b =>
            {
                b.HasOne("SeniorWebApiProject.Domain.LocationModels.City", "City")
                    .WithMany()
                    .HasForeignKey("CityId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("SeniorWebApiProject.Domain.LocationModels.Neighborhood", b =>
            {
                b.HasOne("SeniorWebApiProject.Domain.LocationModels.District", "District")
                    .WithMany()
                    .HasForeignKey("DistrictId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("SeniorWebApiProject.Domain.UserModels.UserAbility", b =>
            {
                b.HasOne("SeniorWebApiProject.Domain.UserModels.Ability", "Ability")
                    .WithMany("UserAbilities")
                    .HasForeignKey("AbilityId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SeniorWepApiProject.Domain.IdentityModels.AppUser", "User")
                    .WithMany("UserAbilities")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("SeniorWebApiProject.Domain.UserModels.UserFancy", b =>
            {
                b.HasOne("SeniorWebApiProject.Domain.UserModels.Fancy", "Fancy")
                    .WithMany("UserFancies")
                    .HasForeignKey("FancyId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SeniorWepApiProject.Domain.IdentityModels.AppUser", "User")
                    .WithMany("UserFancies")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("SeniorWepApiProject.Domain.Swap", b =>
            {
                b.HasOne("SeniorWebApiProject.Domain.LocationModels.Address", "SwapAddress")
                    .WithMany()
                    .HasForeignKey("AddressId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SeniorWepApiProject.Domain.IdentityModels.AppUser", "RecieverUser")
                    .WithMany()
                    .HasForeignKey("RecieverUserId");

                b.HasOne("SeniorWepApiProject.Domain.IdentityModels.AppUser", "SenderUser")
                    .WithMany()
                    .HasForeignKey("SenderUserId");
            });
#pragma warning restore 612, 618
        }
    }
}